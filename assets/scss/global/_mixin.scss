// ------------------------------------------------------------
//   Mixins for Breakpoints/Typography, based on Matt Hinchliffe's work
// ------------------------------------------------------------

// Responsiveness
@mixin breakpoint($breakpoint-name) {
  @media screen and (max-width: get-breakpoint($breakpoint-name)) {
    @content;
  }
}

@mixin vertical-breakpoint($breakpoint-name) {
  @media screen and (max-height: get-vertical-breakpoint($breakpoint-name)) {
    @content;
  }
}


// Responsive Typography
@mixin text-size($text-size, $breakpoint-name: "small") {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);
  font-size: map-get($text-size-properties, "font-size");
  line-height: map-get($text-size-properties, "line-height");
}

@mixin responsive-text-size($text-size, $default-breakpoint: "large") {
  @include text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint and breakpoint($breakpoint-name) != null {
      @include breakpoint($breakpoint-name) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}


@mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder           {@content}
    ::-moz-placeholder          {@content}
    :-ms-input-placeholder      {@content}
}

// ------------------------------------------------------------
//   Expertise Vendors
// ------------------------------------------------------------

// Vendor prefixes
@mixin vendor($property, $value, $vendors: webkit moz ms o) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }
  #{$property}: #{$value};
}

// linear gradient + vendor prefixes
@mixin linear_gradient($value, $vendors: webkit moz ms o) {
  @each $vendor in $vendors {
    background-image: -#{$vendor}-linear-gradient($value);
  }
  background-image: linear-gradient($value);
}


@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// rems that fallback to pixels
@mixin rem($property, $values, $important: '') {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value/16}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues + $important;
  #{$property}: $remValues + $important;
}

// retina images with vendor prefixes
@mixin image-2x($image, $width: false, $height: false) {
  @media   (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

// Expertise limit intro text height
@mixin intro_height($lines, $breakpoint: 'desktop') {
  $line_height: 27px;
  @if $breakpoint == 'desktop' {
    $line_height: 27px;
  } @else {
    $line_height: 21px;
  }

  @include rem(height, $lines * $line_height);

}


// Gets Social Icons as scalalable svgs
@mixin social_icons($type) {
  background: url(#{'../image/expertise-icons/' + $type +'.svg'});
  background-repeat: no-repeat;
  background-size: 100%;
  position: absolute;
  top: 0;
  left: 0;
}
